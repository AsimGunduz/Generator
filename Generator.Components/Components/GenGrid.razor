@*@typeparam TModel where TModel :new()*@
@inherits MudTable<object>
@using Generator.Shared.Extensions

@if (DataSource is null) {return;}

<CascadingValue Name="@(nameof(GenGrid.ParentComponent))" Value="this">

    @{
        if (GenColumns is not null && IsFirstRender)
        {
            @GenColumns
            IsFirstRender = false;
        }
    }

    <MudCard Elevation="4" Style="@(Style??"width:100%important")" Class="@Class">
        <MudCardHeader>
            <CardHeaderContent>
                <MudGrid>
                    <MudText Style="margin:1rem!important" Align="Align.Start" Typo="Typo.h6">
                        @Title
                    </MudText>
                    <MudSpacer />
                    @{
                        if (EnableSearch)
                        {
                            <MudTextField @bind-Value="@_SearchString"
                                          Disabled="SearchDisabled"
                                          Class="mt-0 mr-5"
                                          Placeholder="@SearchPlaceHolderText"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium">

                            </MudTextField>
                        }
                    }
                </MudGrid>
            </CardHeaderContent>
            <CardHeaderActions>

            </CardHeaderActions>
        </MudCardHeader>

        
        @{


            <MudTable @ref="@GridRef"
                      T="object"
                      Items="DataSource"
                      Dense="Dense"
                      RowClassFunc="@RowClassFunc"
                      OnRowClick="@OnRowClick"
                      MultiSelection="MultiSelection"
                      Breakpoint="Breakpoint.None"
                      Hover="Hover"
                      Elevation="0"
                      FixedHeader="FixedHeader"
                      FixedFooter="FixedFooter"
                      Height="Height"
                      @bind-SelectedItem="SelectedItem"
                      SelectedItems="@SelectedItems"
                      Filter="new Func<object,bool>(SearchFunction)"
                      Virtualize="Virtualize"
                      OnCommitEditClick="OnEditCLick"
                      RowEditPreview="async x=> await OnBeforeAnyAction(x)"
                      RowEditCancel="async x=> OnCancel(x)"
                      RowEditCommit="async x=> await OnCommit(x)"
                      IsEditRowSwitchingBlocked="true"
                      ApplyButtonPosition="TableApplyButtonPosition.End"
                      EditButtonPosition="TableEditButtonPosition.End"
                      EditTrigger="TableEditTrigger.EditButton"
                      ReadOnly="false"
                      CanCancelEdit="true">


                <HeaderContent>
                    @{

                        if (HasDetail && EditMode != EditMode.SmartPopup)
                        {
                            <MudTh>

                            </MudTh>
                        }
                        foreach (var item in GetComponentOf<IGenComponent>().Where(x => x.VisibleOnGrid))
                        {
                            <MudTh>
                                @item.Label
                            </MudTh>
                        }
                    }
                <MudTh>

                    <div style="@(DetailClicked?"pointer-events: none;opacity:0.4;":string.Empty)">
                        <MudGrid Class="ml-10" Justify="Justify.FlexEnd">
                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Size="Size.Medium" @onclick="OnAddNewEvent" Disabled="NewDisabled" />
                        </MudGrid>
                    </div>

                  

                </MudTh>
                </HeaderContent>


                <RowTemplate>
                    @{

                        if (HasDetail && EditMode != EditMode.SmartPopup)
                        {
                            <MudTd>
                                <MudIconButton Size="Size.Small"
                                               Disabled="ExpandDisabled"
                                               Icon="@(DetailClicked?Icons.Material.Filled.ExpandLess:Icons.Material.Filled.ExpandMore)"
                                               OnClick="@(OnDetailClicked)">


                                </MudIconButton>
                            </MudTd>
                        }


                        foreach (var item in GetComponentOf<IGenComponent>().Where(x => x.VisibleOnGrid))
                        {
                            @*@onclick:stopPropagation = "EditMode==EditMode.Popup"*@
                            <MudTd @onclick:stopPropagation = "EditMode==EditMode.Popup">
                                @item.RenderAsGridComponent(context)
                            </MudTd>
                        }

                        <MudTh>

                        </MudTh>


                    }
                </RowTemplate>
                 
                <RowEditingTemplate>
                    @{
                        foreach (var item in GetComponentOf<IGenComponent>().Where(x => x.VisibleOnGrid).ToList())
                        {
                            <MudTd>
                                @item.RenderAsComponent(context,ignoreLabels:true)
                            </MudTd>
                        }

                    }
                </RowEditingTemplate>
                <ChildRowContent>
                    @{
                        if (EditMode != EditMode.SmartPopup && DetailClicked && HasDetail)
                        {
                            <tr style="display:table-row!important;overflow:hidden">
                            <td style="display:table-cell!important;overflow:hidden" colspan="12">

                                
                                @GenDetailGrid(context)
                            </td>
                            </tr>
                        }
                    }

                </ChildRowContent>

                <PagerContent >
                    <MudTablePager   PageSizeOptions="new int[] { 10,25,50,100, DataSource.Count() == 0 ?999:DataSource.Count()}" />
                </PagerContent>
                <EditButtonContent Context="button">
                    
                    <div  style="@(DetailClicked?"pointer-events: none;opacity:0.4;":string.Empty)">
                        <MudIconButton @ref="EditButtonRef" Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Class="pa-0" OnClick="@(()=>OnDeleteClicked(button.ButtonAction))" Disabled="@button.ButtonDisabled" />
                    </div>

                </EditButtonContent>
            </MudTable>

 
        }


    </MudCard>

</CascadingValue>
