@*@typeparam TModel where TModel :new()*@
@inherits MudTable<object>
@using Generator.Shared.Extensions

@if (DataSource is null) {return;}

<CascadingValue Name="ParentComponent" Value="this">

    @{
        if (GenColumns is not null && IsFirstRender)
        {
            @GenColumns
            IsFirstRender = false;
        }
    }

    <MudCard Elevation="4" Style="@(Style??"width:100%important")" Class="@Class">
        <MudCardHeader>
            <CardHeaderContent>
                <MudGrid>
                    <MudText Style="margin:1rem!important" Align="Align.Start" Typo="Typo.h6">
                        @Title
                    </MudText>
                    <MudSpacer />
                    @{
                        if (EnableSearch)
                        {
                            <MudTextField @bind-Value="@_SearchString"
                                          Disabled="IsSearchDisabled"
                                          Class="mt-0 mr-5"
                                          Placeholder="@SearchPlaceHolderText"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium">

                            </MudTextField>
                        }
                    }
                </MudGrid>
            </CardHeaderContent>
            <CardHeaderActions>

            </CardHeaderActions>
        </MudCardHeader>

        
        @{


            <MudTable @ref="@GridRef"
                      Items="DataSource"
                      Dense="Dense"
                      MultiSelection="MultiSelection"
                      Breakpoint="Breakpoint.None"
                      Hover="Hover"
                      Elevation="0"
                      FixedHeader="FixedHeader"
                      FixedFooter="FixedFooter"
                      Height="Height"
                      @bind-SelectedItem="SelectedItem"
                      SelectedItems="@SelectedItems"
                      Filter="new Func<object,bool>(SearchFunction)"
                      Virtualize="Virtualize"
                      OnCommitEditClick="OnEditCLick"
                      RowEditPreview="async x=> await OnBeforeAnyAction(x)"
                      RowEditCancel="async x=> OnCancel(x)"
                      RowEditCommit="async x=> await OnCommit(x)"
                      IsEditRowSwitchingBlocked="true"
                      ApplyButtonPosition="TableApplyButtonPosition.End"
                      EditButtonPosition="TableEditButtonPosition.End"
                      EditTrigger="TableEditTrigger.EditButton"
                      ReadOnly="false"
                      CanCancelEdit="true">


                <HeaderContent>
                    @{

                        foreach (var item in GetComponentOf<GenTextField>().Where(x => x.VisibleOnGrid))
                        {
                            <MudTh>
                                @item.Label
                            </MudTh>
                        }
                    }
                <MudTh>
                    <MudGrid Class="ml-10" Justify="Justify.FlexEnd">
                        <MudIconButton  Icon="@Icons.Material.Filled.AddCircle" Size="Size.Medium" @onclick="OnAddNewEvent" />
                    </MudGrid>
                   
                </MudTh>
                </HeaderContent>


                <RowTemplate>
                    @{

                        foreach (var item in GetComponentOf<GenTextField>().Where(x => x.VisibleOnGrid))
                        {
                            <MudTd @onclick:stopPropagation="EditMode==EditMode.Popup">
                                @item.RenderComponent(context, ComponentType.Grid)
                            </MudTd>
                        }
                        //SetEditingItem(DataSource.Last());
                        //EditButtonRef.OnClick.i();
                        //Add colonu icin eklendi
                        <MudTh>
                           
                        </MudTh>


                        //AsyncHelper.RunSync(ExecutableTasks);
                       


                    }
                </RowTemplate>
                 
                <RowEditingTemplate>
                    @{
                        int i = 0;
                        foreach (var item in GetComponentOf<GenTextField>().Where(x => x.VisibleOnGrid).ToList())
                        {
                            Console.WriteLine(i);
                            <MudTd>
                                @item.RenderComponent(context, ComponentType.Form)
                            </MudTd>
                            i++;
                        }

                    }
                </RowEditingTemplate>
                <ChildRowContent>
                    @{
                        if (!SmartCrud)
                        {
                            <tr style="display:table-row!important;overflow:hidden">
                                <td style="display:table-cell!important;overflow:hidden" colspan="12">
                                    <CascadingValue Value="context" Name="@(nameof(GenGrid.ParentContext))">
                                        @GenDetailGrid
                                    </CascadingValue>
                                </td>
                            </tr>
                        }
                    }

                </ChildRowContent>

                <PagerContent >
                    <MudTablePager  PageSizeOptions="new int[] { 10,25,50,100, DataSource.Count() == 0 ?999:DataSource.Count()}" />
                </PagerContent>
                <EditButtonContent  Context="button">
                    <MudIconButton  @ref="EditButtonRef" Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                </EditButtonContent>
            </MudTable>

 
        }


    </MudCard>

</CascadingValue>
